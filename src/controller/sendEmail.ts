import type { Request, Response } from "express";
import Nylas from "nylas";
import Draft from "nylas/lib/models/draft";
import { z } from "zod";

import type { MessageBody } from "../types";
import { autoResponderAi } from "../utils/auto-responder";

export const sendEmail = async (
  req: Request<never, never, MessageBody>,
  res: Response
): Promise<Response<unknown> | undefined> => {
  const user = res.locals.user;
  const { to, subject, body, replyToMessageId, type, from, plaintext } =
    req.body;
  if (!user) {
    return res.status(400).json({ message: "Something went wrong" });
  }
  // Create a Zod schema for email validation
  const emailSchema = z.string().email();
  const result = emailSchema.safeParse(to.email);
  if (!result.success) {
    return res.status(400).json({ message: "Invalid email" });
  }
  if (!type || !body.length || !subject || !plaintext.length) {
    return res.status(400).json({ message: "Something went wrong" });
  }
  if (type === "reply" && !replyToMessageId) {
    return res.status(400).json({ message: "Something went wrong" });
  }
  try {
    const draft = new Draft(Nylas.with(user.accessToken));
    //Unnecessary attributes are required in EmailParticipant[] used in draft.from, draft.to
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
    draft.from = [{ email: user.emailAddress }];
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
    draft.to = [{ email: to.email }];
    draft.subject = subject;
    draft.body = body;

    if (type === "reply") {
      draft.replyToMessageId = replyToMessageId;
    }

    const message = await draft.send();

    const autoGeneratedMessage = await autoResponderAi({
      message: plaintext,
      receiver: from.name,
      sender: to.name,
    });
    if (autoGeneratedMessage) {
      //Unnecessary attributes are required in EmailParticipant[] used in draft.from, draft.to
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-ignore
      draft.from = [{ email: to.email }];
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-ignore
      draft.to = [{ email: user.emailAddress }];
      draft.subject = subject;
      draft.body = autoGeneratedMessage;

      if (type === "reply") {
        draft.replyToMessageId = replyToMessageId;
      }

      const message = await draft.send();
      return res.json(message);
    }
    console.log("Auto generated message", autoGeneratedMessage);
    return res.json(message);
  } catch (error) {
    console.log("Something went wrong", error);
  }
};
